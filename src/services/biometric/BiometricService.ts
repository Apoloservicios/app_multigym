// src/services/biometric/BiometricService.ts
import * as LocalAuthentication from 'expo-local-authentication';
import { Alert } from 'react-native';

export interface BiometricCheckResult {
  success: boolean;
  error?: string;
  biometricType?: string;
}

export const BiometricService = {
  // Verificar si el dispositivo soporta biom√©tricos
  checkDeviceSupport: async (): Promise<{
    isSupported: boolean;
    hasHardware: boolean;
    isEnrolled: boolean;
    availableTypes: LocalAuthentication.AuthenticationType[];
  }> => {
    try {
      console.log('üîç Verificando soporte biom√©trico...');
      
      // Verificar si hay hardware biom√©trico
      const hasHardware = await LocalAuthentication.hasHardwareAsync();
      console.log('üì± Hardware biom√©trico:', hasHardware);
      
      // Verificar si hay biom√©tricos registrados
      const isEnrolled = await LocalAuthentication.isEnrolledAsync();
      console.log('üëÜ Biom√©tricos registrados:', isEnrolled);
      
      // Obtener tipos disponibles
      const availableTypes = await LocalAuthentication.supportedAuthenticationTypesAsync();
      console.log('üîê Tipos disponibles:', availableTypes);
      
      return {
        isSupported: hasHardware && isEnrolled,
        hasHardware,
        isEnrolled,
        availableTypes
      };
      
    } catch (error) {
      console.error('‚ùå Error verificando soporte biom√©trico:', error);
      return {
        isSupported: false,
        hasHardware: false,
        isEnrolled: false,
        availableTypes: []
      };
    }
  },

  // Obtener texto descriptivo del tipo de biom√©trico
  getBiometricTypeText: (types: LocalAuthentication.AuthenticationType[]): string => {
    if (types.includes(LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION)) {
      return 'Face ID';
    } else if (types.includes(LocalAuthentication.AuthenticationType.FINGERPRINT)) {
      return 'Huella Digital';
    } else if (types.includes(LocalAuthentication.AuthenticationType.IRIS)) {
      return 'Escaneo de Iris';
    } else {
      return 'Autenticaci√≥n Biom√©trica';
    }
  },

  // Realizar autenticaci√≥n biom√©trica
  authenticateAsync: async (reason: string = 'Confirma tu identidad para continuar'): Promise<BiometricCheckResult> => {
    try {
      console.log('üîê Iniciando autenticaci√≥n biom√©trica...');
      
      // Verificar soporte primero
      const support = await BiometricService.checkDeviceSupport();
      
      if (!support.hasHardware) {
        return {
          success: false,
          error: 'Tu dispositivo no tiene hardware biom√©trico'
        };
      }
      
      if (!support.isEnrolled) {
        return {
          success: false,
          error: 'No tienes datos biom√©tricos registrados en tu dispositivo'
        };
      }
      
      // Realizar autenticaci√≥n
      const result = await LocalAuthentication.authenticateAsync({
        promptMessage: reason,
        cancelLabel: 'Cancelar',
        fallbackLabel: 'Usar contrase√±a',
        disableDeviceFallback: false,
      });
      
      if (result.success) {
        console.log('‚úÖ Autenticaci√≥n biom√©trica exitosa');
        return {
          success: true,
          biometricType: BiometricService.getBiometricTypeText(support.availableTypes)
        };
      } else {
        console.log('‚ùå Autenticaci√≥n biom√©trica fall√≥:', result.error);
        return {
          success: false,
          error: result.error || 'Autenticaci√≥n cancelada'
        };
      }
      
    } catch (error) {
      console.error('‚ùå Error en autenticaci√≥n biom√©trica:', error);
      return {
        success: false,
        error: 'Error interno de autenticaci√≥n'
      };
    }
  },

  // Check-in con biom√©trica
  performBiometricCheckin: async (
    membershipId: string, 
    gymId: string,
    onSuccess: () => void,
    onError: (error: string) => void
  ): Promise<void> => {
    try {
      console.log('üèãÔ∏è Iniciando check-in biom√©trico...');
      
      // Mostrar alerta de confirmaci√≥n
      Alert.alert(
        'üîê Check-in Biom√©trico',
        'Usa tu huella digital o Face ID para confirmar tu entrada al gimnasio',
        [
          {
            text: 'Cancelar',
            style: 'cancel'
          },
          {
            text: 'Continuar',
            onPress: async () => {
              // Realizar autenticaci√≥n biom√©trica
              const authResult = await BiometricService.authenticateAsync(
                'Confirma tu entrada al gimnasio'
              );
              
              if (authResult.success) {
                // Registrar asistencia
                try {
                  const { multiMembershipService } = await import('../firebase/multiMembershipService');
                  const registered = await multiMembershipService.registerAttendance(membershipId, gymId);
                  
                  if (registered) {
                    console.log('‚úÖ Check-in registrado exitosamente');
                    Alert.alert(
                      '‚úÖ Check-in Exitoso',
                      `Entrada confirmada con ${authResult.biometricType}\n\nHora: ${new Date().toLocaleTimeString('es-AR', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}`,
                      [{ text: 'Genial!', onPress: onSuccess }]
                    );
                  } else {
                    onError('No se pudo registrar la asistencia');
                  }
                } catch (error) {
                  console.error('‚ùå Error registrando asistencia:', error);
                  onError('Error al registrar la asistencia');
                }
              } else {
                onError(authResult.error || 'Autenticaci√≥n fallida');
              }
            }
          }
        ]
      );
      
    } catch (error) {
      console.error('‚ùå Error en check-in biom√©trico:', error);
      onError('Error interno del check-in');
    }
  },

  // Configuraci√≥n inicial de biom√©tricos
  setupBiometrics: async (): Promise<{
    configured: boolean;
    message: string;
  }> => {
    try {
      const support = await BiometricService.checkDeviceSupport();
      
      if (!support.hasHardware) {
        return {
          configured: false,
          message: 'Tu dispositivo no soporta autenticaci√≥n biom√©trica'
        };
      }
      
      if (!support.isEnrolled) {
        Alert.alert(
          'Configurar Biom√©tricos',
          'Para usar el check-in r√°pido, necesitas configurar tu huella digital o Face ID en la configuraci√≥n de tu dispositivo.',
          [
            { text: 'M√°s tarde', style: 'cancel' },
            { 
              text: 'Ir a Configuraci√≥n', 
              onPress: () => {
                // En una app real, aqu√≠ abrir√≠amos la configuraci√≥n del dispositivo
                console.log('Abriendo configuraci√≥n del dispositivo...');
              }
            }
          ]
        );
        
        return {
          configured: false,
          message: 'Necesitas configurar datos biom√©tricos en tu dispositivo'
        };
      }
      
      return {
        configured: true,
        message: `${BiometricService.getBiometricTypeText(support.availableTypes)} configurado correctamente`
      };
      
    } catch (error) {
      return {
        configured: false,
        message: 'Error verificando configuraci√≥n biom√©trica'
      };
    }
  }
}; 